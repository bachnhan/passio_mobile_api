@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6">
                <h3>Báo cáo doanh thu cửa hàng</h3>
                <h5 data-role="small-date" id="dateRange"></h5>
            </div>
            <div class="col-md-6" style="text-align: right;">
                <div style="display:inline-block">
                    <button id="btnExport" class="btn btn-primary btn-sm">
                        <i class="fa fa-download"></i>
                        &nbsp;Xuất ra file Excel
                    </button>
                </div><!-- /.Export to excel -->
                <!-- Comparison button (So sánh các cửa hàng) -->
                <button id="sosanh" class="btn btn-primary btn-sm" style="display:inline-block" data-toggle="modal" data-target="#revanue-comparison">
                    So sánh các cửa hàng
                </button><!-- /.Comparison button (So sánh các cửa hàng) -->
            </div>
        </div>
        <hr />
        <div class="row" style="margin-top: 19px;">
            <div class="col-md-6">
                <div id="chart">
                    <h3>Tổng doanh thu: <strong><span id="totalIncome"></span> VNĐ</strong></h3>
                    <div id="finalamountcontainer"></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="pull-right text-right myDatetimePicker">
                    <div class="input-group">
                        <!-- Daterange picker -->
                        <div class="dateTime pull-right width230">
                            <div class="fg-line m-t-5">
                                <div id="reportrange" class="fg-line m-t-5">
                                    <input id="date-string" readonly class="form-control text-center">
                                    <a class="myCelenderA"><i class="fa fa-calendar"></i></a>
                                </div></div>
                            @*<div class="fg-line m-t-5">
                                <div id="reportrange" class="btn-datetime form-control">
                                    <span style="padding-right: 10px;"></span><i class="fa fa-calendar"></i><b class="caret"></b>
                                </div>
                            </div>*@
                        </div>

                        <div class="input-group-btn FindButtonDateTime">
                            <a class="btn btn-primary btn-sm FindDateTime" id="btnSearch" style="">
                                <i class="left-icon fa fa-search"></i>  Tìm
                            </a>
                        </div>
                    </div>
                    <input type="hidden" id="sTime" />
                    <input type="hidden" id="eTime" />
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">

                @*<div class="input-group myGroupChooseWeek" style="display: inline-flex;">
                    <label class="right-icon">Cửa hàng: &nbsp;</label>


                    <div class="styled-select blue semi-square" style="width: 150px;">
                        <select id="districts">
                            <option value="0">Tất cả</option>
                        </select>
                    </div>


                </div>*@
                @*<div class="input-group">
                    <label class="right-icon">Cửa hàng: &nbsp;</label>
                    <select id="districts">
                        <option value="0">Tất cả</option>
                        
                    </select>

                    <div class="styled-select blue semi-square">
                        <input id="customers-list" name="custName" class="" style="width:100%;" />
                        <input type="hidden" name="custID" id="customer-id" />
                    </div>
                </div>*@

            </div>
        </div>
    </div>
    <div class="modal fade " tabindex="-1" id="revanue-comparison" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" style="width: 1215px; margin-left: -154px;">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title text-center">So sánh doanh thu</h4>
                </div>
                <!-- Modal body -->
                <div class="modal-body">
                    <div class="row">
                        <!-- Comparison chart -->
                        <div class="col-md-9">
                            <div id="comparison-container" style="width:885px;height:auto;">
                            </div>
                        </div><!-- /.Comparison chart -->
                        <!-- Store filter -->
                        <div class="col-md-3">
                            <!-- Check boxes for choosing store -->
                            <div id="store-filter" class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <div class="row">

                                </div>
                            </div><!-- /.Check boxes for choosing store -->
                            <!-- Select all and Unselect all -->
                            <div id="store-filter-option" class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="text-align: center; margin-top: 10px">
                                <button class="btn btn-primary btn-sm" id="filter-select-all">Chọn tất cả</button>
                                <button class="btn btn-success btn-sm" id="filter-unselect-all">Hủy chọn tất cả</button>
                            </div><!-- Select all and Unselect all -->
                        </div><!-- /.Store filter -->
                    </div>
                </div><!-- /.Modal body -->
            </div>
        </div>
    </div><!-- /.Comparison modal (Tổng doanh thu) -->


    <div class="card-padding">
        <div id="datatable">
            <table id="storeReportDatatable" class="table table-striped table-bordered table-hover" style="width: 100% !important">
                <thead>
                    <tr>
                        <th>
                            <label class="">STT</label>
                        </th>
                        <th>
                            <label class="">Cửa hàng</label>
                        </th>
                        <th>
                            <label class="">Tổng doanh thu</label>
                        </th>
                        <th>
                            <label class="">Giảm giá</label>
                        </th>
                        <th>
                            <label class="">Doanh thu sau giảm giá</label>
                        </th>
                        <th>

                        </th>
                    </tr>
                </thead>
                <tbody></tbody>
                <tfoot>
                    <tr>
                        <th colspan="2" style="text-align:right">Tổng doanh thu của tất cả cửa hàng:</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <form class="hidden" id="formReportExcel" action="@Url.Action("ExportExcelBaoCaoTheoNgay","SystemReport")">
        <input name="startTime" />
        <input name="endTime" />
    </form>
</div>

<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places&key=AIzaSyDwJA7jUX5F9KR44NAKvfJsxn-9cjQwzZk"></script>
<script>

    $('#btnExport').on('click', null, function () {
        $('[name=startTime]').val($('#sTime').val());
        $('[name=endTime]').val($('#eTime').val());
        $('#formReportExcel').submit();
    });
    var numberWithSeparator = function (x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    };

    $("#districts").on('change', function () {
        var value = $(this).find("option:selected").attr("value");
        alert(value); 
    });

    $(document).ready(function () {
        setupDaterangepicker();
        getData();

        // Envent when click on the check box (Comparison chart)
        $("#store-filter").on("change", function () {
            filterStoreList = [];
            filterDiscountList = [];
            filterFinalList = [];

            $(".store-name-filter:checked").each(function () {
                filterStoreList.push($(this).val());
                filterDiscountList.push($(this).data("discount"));
                filterFinalList.push($(this).data("final"));
            });

            SystemRevenueComparisonData.listStoreName = filterStoreList;
            SystemRevenueComparisonData.listDiscount = filterDiscountList;
            SystemRevenueComparisonData.listFinal = filterFinalList;

            setUpComparisonChart(SystemRevenueComparisonData); // Set up comparison chart
        });

        toDistrictSelectList();

        // Select all and Unselect all on click
        $("#store-filter-option").on("click", "#filter-select-all", function () {
            $(".store-name-filter").prop("checked", "checked");
            $("#store-filter").trigger("change");
        });

        $("#store-filter-option").on("click", "#filter-unselect-all", function () {
            $(".store-name-filter").removeAttr("checked");
            $("#store-filter").trigger("change");
        });

        // Compare stores button
        $(document).on("click", "#sosanh", function () {
            $("#revanue-comparison").modal("show"); // Show modal for chart
            setUpComparisonChart(SystemRevenueComparisonData); // Set up chart
            $("#store-filter .row").empty();

            var getEl = function (index, val) {
                return $('<div/>', {
                    'class': 'col-md-6',
                    'html': [
                        $('<input/>', {
                            'type': 'checkbox',
                            'value': val,
                            'class': 'nice-check nice-check-sm store-name-filter',
                            'id': 'filter-' + index,
                            'checked': 'checked'
                        }),
                        $('<label/>', {
                            'type': 'checkbox',
                            'for': 'filter-' + index,
                            'html': val
                        }),
                    ]
                });
            }

            // Add check box to modal (Store name)
            $.each(SystemRevenueComparisonData.listStoreName, function (index, value) {
                $("#store-filter .row").append(getEl(index, value));
            });

            // Add more data to check box (Discount amount)
            var listCheckbox = $(".store-name-filter");
            $.each(SystemRevenueComparisonData.listDiscount, function (index, value) {
                var checkbox = listCheckbox.eq(index);
                checkbox.attr("data-discount", value);
            });

            // Add more data to check box (Final amount)
            $.each(SystemRevenueComparisonData.listFinal, function (index, value) {
                var checkbox = listCheckbox.eq(index);
                checkbox.attr("data-final", value);
            });
        });
    });

    function setupDaterangepicker() {
        $('#reportrange span').html(moment().add(-30, 'days').format('MMM D, YYYY') + ' - ' + moment().add(0, 'days').format('MMM D, YYYY'));
        $('#reportrange').daterangepicker({
            format: 'DD/MM/YYYY',
            startDate: moment().add(-30, 'days'),
            endDate: moment().add(0, 'days'),
            minDate: '01/01/2012',
            maxDate: '31/12/2100',
            dateLimit: { days: 365 },
            showDropdowns: true,
            showWeekNumbers: true,
            timePicker: false,
            timePickerIncrement: 1,
            timePicker12Hour: true,
            //parentEl: '.modal-body',
            ranges: {
                'Hôm nay': [moment.utc().startOf('day'), moment.utc().endOf('day')],
                'Hôm qua': [moment.utc().startOf('day').add(-1, 'days'), moment.utc().endOf('day').add(-1, 'days')],
                'Tuần này': [moment().add(0, 'week').startOf('isoweek'), moment().add(0, 'week').endOf('isoweek')],
                'Tuần trước': [moment().add(-1, 'week').startOf('isoweek'), moment().add(-1, 'week').endOf('isoweek')],
                'Tháng này': [moment().add(0, 'month').startOf('month'), moment().add(0, 'month').endOf('month')],
                'Tháng trước': [moment().add(-1, 'month').startOf('month'), moment().add(-1, 'month').endOf('month')]
            },
            opens: 'left',
            drops: 'down',
            buttonClasses: ['btn', 'btn-sm'],
            applyClass: 'btn-primary',
            cancelClass: 'btn-success',
            separator: ' to ',
            locale: {
                applyLabel: 'Chọn',
                cancelLabel: 'Hủy',
                fromLabel: 'Tùy',
                toLabel: 'ĐẾn',
                customRangeLabel: 'Tùy chọn',
                daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                firstDay: 1
            }
        }, function (start, end, label) {
            //console.log(start.toISOString(), end.toISOString(), label);

            //Prepare start time and end time format
            var startTime = start.format("DD/MM/YYYY"),
                endTime = end.format("DD/MM/YYYY"),
                dateString = "(" + startTime + (startTime == endTime ? "" : " - " + endTime) + ")";

            if (label != "Tùy chọn") {
                $('#date-string').val(label);
            } else {
                $('#date-string').val(dateString);
            }

            $('#sTime').val(startTime);
            $('#eTime').val(endTime);

            //Chage date at page header
            $('[data-role=small-date]').html('(' + dateString + ')');

            $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
        });

        cb(moment(), moment(), "Hôm nay");

        $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
            getData();
        });

    }

    function cb(start, end, label) {
        var startTime = start.format("DD/MM/YYYY"),
            endTime = end.format("DD/MM/YYYY"),
            dateString = "(" + startTime + (startTime == endTime ? "" : " - " + endTime) + ")";

        if (label != "Tùy chọn") {
            $('#date-string').val(label);
        } else {
            $("#date-string").val(dateString);
        }

        $("#sTime").val(startTime);
        $("#eTime").val(endTime);
        $("#dateRange").html(dateString);
    }

    function RefreshTable() {
        var oTable = $("#storeReportDatatable").dataTable();
        oTable._fnPageChange(0);
        oTable._fnAjaxUpdate();
    }

    function getData() {
        $.ajax({
            url: '@this.Url.Action("RevenueReportDatatable")',
            type: 'GET',
            data: { startTime: $('#sTime').val(), endTime: $('#eTime').val() },
            success: function (rs) {
                //Save dataComparisonChart to SystemRevenueComparisonData for comparison
                SystemRevenueComparisonData = rs.dataComparisonChart;
                //Log for debuging
                //console.log("Result: " + rs);
                //console.log("SystemRevenueComparisonData: " + SystemRevenueComparisonData);
                //Set up table (id: storeReportDatatable)
                InitDatatable(rs.dataTable);
                // Check if start time and end time is are different then show the chart (Doang thu sau giảm giá)
                if ($('#sTime').val() != $('#eTime').val()) {
                    $('#finalamountcontainer').show();
                    //setUpFinalAmountByDateChart(rs.chartData);
                } else {
                    $('#finalamountcontainer').hide();
                }
            }
        });
    };

    function InitDatatable(data) {
        //Log for debuging
        //console.log(data);
        //Re create table for new data
        $('#datatable').html('<table id="storeReportDatatable" class="table table-striped table-bordered table-hover" style="width: 100% !important">'
                                    + '<thead style="white-space:nowrap; text-overflow:ellipsis;"><tr><th><label class="">STT</label></th><th><label class="">Cửa hàng</label>'
                                    + '</th><th><label class="">Tổng doanh thu</label></th><th><label class="">Giảm giá</label></th><th>'
                                    + '<label class="">Doanh thu sau giảm giá</label></th></tr></thead><tbody></tbody><tfoot><tr>'
                                    + '<th colspan="2" style="text-align:right">Tổng doanh thu của tất cả cửa hàng:</th><th></th><th></th><th></th></tr></tfoot></table>');

        $("#storeReportDatatable").dataTable({
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;

                // Remove the formatting to get integer data for summation
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                        i : 0;
                };

                // Total over all pages
                totalIncome = api
                    .column(2)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);

                discount = api
                    .column(3)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0)

                finalIncome = api
                    .column(4)
                    .data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0)


                // Update footer
                var cells = row.getElementsByTagName('th');
                cells[1].innerHTML = numberWithSeparator(totalIncome);
                cells[2].innerHTML = numberWithSeparator(discount);
                cells[3].innerHTML = numberWithSeparator(finalIncome);
                $('#totalIncome').html(numberWithSeparator(totalIncome));
            },
            "bRetrieve": true,
            "bScrollCollapse": true,
            "data": data,
            "iDisplayLength": 100,
            "aLengthMenu": [100, 200],
            "oLanguage": {
                "sSearch": "Tên cửa hàng:",
                "sZeroRecords": "Không có dữ liệu phù hợp",
                "sInfo": "Hiển thị từ _START_ đến _END_ trên tổng số _TOTAL_ dòng",
                "sEmptyTable": "Không có dữ liệu",
                "sInfoFiltered": " - lọc ra từ _MAX_ dòng",
                "sLengthMenu": "Hiển thị _MENU_ dòng",
                "sProcessing": "Đang xử lý...",
                "oPaginate": {
                    "sNext": "<i class='fa fa-chevron-right'></i>",
                    "sPrevious": "<i class='fa fa-chevron-left'></i>"
                }

            },
            "aoColumnDefs": [
                {
                    "aTargets": [0, 1, 2, 3, 4],
                    "bSortable": false,
                    "sClass": "text-center"
                }
            ],
            "bAutoWidth": true
        }).fnSetFilteringDelay(delaySearch);
    }

    //"Tìm" button event on click
    $('#btnSearch').on('click', function () {
        sStartDate = $("#sTime").val();
        sEndDate = $("#eTime").val();
        dStartDate = moment(sStartDate, 'DD/MM/YYYY');
        dEndDate = moment(sEndDate, 'DD/MM/YYYY');

        if (sStartDate.length > 16 || sEndDate.length > 16) {
            ShowMessage("Vui lòng nhập thời gian đúng định dạng", 3);
            return;
        }

        if ((sStartDate.length > 0 && sEndDate.length == 0) || (sEndDate.length > 0 && sStartDate.length == 0) || (dStartDate > dEndDate)) {
            ShowMessage("Thời gian bắt đầu và kết thúc không phù hợp", 3);
            return;
        }

        //InitDatatable();
        if ($("#sTime").val() == '' || $("#eTime").val() == '') {
            $('#dateRange').html('(' + moment().format('DD/MM/YYYY') + ')');
        } else {
            $('#dateRange').html('(' + $("#sTime").val() + ($("#sTime").val() === $("#eTime").val() ? '' : (' - ' + $("#eTime").val())) + ')');
        }
        getData();
    });

    ////Set up "Doanh thu sau giảm giá" chart
    function setUpFinalAmountByDateChart(chartData) {
        $('#finalamountcontainer').highcharts({
            title: {
                text: 'Doanh thu sau giảm giá',
                x: -20 //center
            },
            subtitle: {
                text: $('#dateRange').html(),
                x: -20
            },
            xAxis: {
                categories: chartData.dateList
            },
            yAxis: {
                title: {
                    text: 'VNĐ'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                valueSuffix: ' VNĐ'
            },
            //legend: {
            //    layout: 'vertical',
            //    align: 'right',
            //    verticalAlign: 'middle',
            //    borderWidth: 0
            //},
            series: [
                {
                    name: 'Doanh thu sau giảm giá',
                    data: chartData.listFinalAmount
                }
            ]
        });
    }

    ////Set up "Doanh thu" chart. All store comparison
    function setUpComparisonChart(data) {
        $('#comparison-container').highcharts({
            chart: {
                type: 'column'
            },
            title: {
                text: 'Tổng doanh thu'
            },
            subtitle: {
                text: $('#dateRange').html(),
            },
            xAxis: {
                categories: data.listStoreName
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'VNĐ'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                    }
                }
            },
            legend: {
                align: 'right',
                x: -30,
                verticalAlign: 'top',
                y: 25,
                floating: true,
                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
                borderColor: '#CCC',
                borderWidth: 1,
                shadow: false
            },
            //tooltip: {
            //    headerFormat: '<b>{point.x}</b><br/>',
            //    pointFormat: '{series.name}: {point.y} VNĐ<br/>'
            //},
            tooltip: {
                valueSuffix: ' VNĐ'
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    //dataLabels: {
                    //    enabled: true,
                    //    color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                    //    style: {
                    //        textShadow: '0 0 3px black'
                    //    }
                    //}
                }
            },
            series: [{
                name: 'Doanh thu sau giảm giá',
                data: data.listFinal
            }, {
                name: 'Giảm giá',
                data: data.listDiscount
            }]
        });
    }

    // "Xuất ra file excel" button. Export to excel
    $(document).on('click', '#export', function () {
        $.ajax({
            url: '@this.Url.Action("ExportRevenueTableToExcel")',
            type: 'GET',
            data: { startTime: $('#sTime').val(), endTime: $('#eTime').val() },
            success: function (rs) {
                if (rs.success == true) {
                    ShowMessage("Xuất file excel thành công <br/>" + rs.fileName, 3);
                } else {
                    ShowMessage('Xuất file Excel thất bại', 1);
                }
            }
        });
    });

    function toDistrictSelectList() {
        var districts = districtList();
        $.each(districts, function (i, item) {
            $('#districts').append($("<option></option>")
                    .attr("value", item[1])
                    .text(item[0]));
        });
    }

    function districtList() {
        var districtList = [];
        $.ajax({
            url: '@Url.Action("GetAllStoreLocation")',
            type: 'GET',           
            success: function (results) {
                var stores = [];
                $.each(results, function (i, rs) {
                    var district = getDistrictviaGeocoder(rs.latitude, rs.longitude);
                    var storeId = rs.storeId;
                    if (districtList.length == 0) {
                        stores.push(storeId);
                        districtList.push({
                            'district': district,
                            'stores' : stores
                        });
                    } else {
                        for (var i = 0; i < districtList.length ; i++) {
                            var temp = districtList[i]['district'];
                            if (district != temp) {
                                stores = [];
                                stores.push(storeId);
                                districtList.push({
                                    'district': district,
                                    'stores': stores
                                });
                            } else {
                                districtList[i]['stores'].push(storeId);
                            }
                        }
                        //if ($.inArray(district, districtList.keys) === -1) {
                        //    stores = [];
                        //    stores.push(storeId);
                        //    districtList.push({
                        //        'district': district,
                        //        'stores': stores
                        //    });
                        //} else {
                        //    districtList['stores'].push(storeId);
                        //}
                    }

                });
            }
        });
        return districtList;
    }

    function getDistrictviaGeocoder(latitude, longitude) {
        var geocoder = new google.maps.Geocoder();
        var latLng = new google.maps.LatLng(latitude, longitude);
        var result = "";
        geocoder.geocode({
            latLng: latLng
            },
            function (responses) {
                if (responses != null && responses.length > 0) {
                    var addrComp = responses[0].address_components;
                    $.each(addrComp, function (i, address_component) {
                        if (address_component.types[0] == "administrative_area_level_2") {                                
                            result = address_component.long_name;
                            return result;
                        }
                    });
                }
                else {
                    result = "Khác";
                }
            }
        );
        return result;
    }
</script>